# Compute SONAR classification results with and without data pre-processing (data normalization).
# Perform data pre-processing with your implementation and with scikit-learn methods and compare the results.
from os import access
import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Load dataset
data = pd.read_csv('sonar.csv')
print(data.columns)
#print(data.info)
#print(data.shape)
print(data.isnull().sum())
print(data.duplicated().sum())
X = data[['0.0200', '0.0371', '0.0428', '0.0207', '0.0954', '0.0986', '0.1539',
       '0.1601', '0.3109', '0.2111', '0.1609', '0.1582', '0.2238', '0.0645',
       '0.0660', '0.2273', '0.3100', '0.2999', '0.5078', '0.4797', '0.5783',
       '0.5071', '0.4328', '0.5550', '0.6711', '0.6415', '0.7104', '0.8080',
       '0.6791', '0.3857', '0.1307', '0.2604', '0.5121', '0.7547', '0.8537',
       '0.8507', '0.6692', '0.6097', '0.4943', '0.2744', '0.0510', '0.2834',
       '0.2825', '0.4256', '0.2641', '0.1386', '0.1051', '0.1343', '0.0383',
       '0.0324', '0.0232', '0.0027', '0.0065', '0.0159', '0.0072', '0.0167',
       '0.0180', '0.0084', '0.0090', '0.0032']]
Y = data['R']
print(f"the x value are ")
print(X.shape)
print(f"the Y value are ")
print(Y.shape)
# label we do for 0 and 1 for y values
label_y = LabelEncoder()
y_labels = label_y.fit_transform(Y)
print(y_labels)
# 70 and 30 percentage split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=50)
# with data pre-processing
X_train_min_max = (X_train - np.min(X_train))/(np.max(X_train)-np.min(X_train))
X_test_min_max = (X_test - np.min(X_test))/(np.max(X_test)-np.min(X_test))
Logistic_R_min_max = LogisticRegression(max_iter=500)
Logistic_R_min_max.fit(X_train_min_max,y_train)
y_pred_min_max = Logistic_R_min_max.predict(X_test_min_max)
Accurecy_min_max = accuracy_score(y_test,y_pred_min_max)
print(f"accuracy after normalisation")
print(Accurecy_min_max)

# # Normalization sing scikit
minmax_scaler = MinMaxScaler()
X_train_minmax_sk = minmax_scaler.fit_transform(X_train)
X_test_minmax_sk = minmax_scaler.transform(X_test)
model_minmax_sk = LogisticRegression(max_iter=1000)
model_minmax_sk.fit(X_train_minmax_sk, y_train)
y_pred_minmax_sk = model_minmax_sk.predict(X_test_minmax_sk)
accuracy_minmax_sk = accuracy_score(y_test, y_pred_minmax_sk)
print(f"\nAccuracy after MinMaxScaler normalization: {accuracy_minmax_sk:.2f}")

### Without data pre-processing -
model_raw = LogisticRegression(max_iter=1000)
model_raw.fit(X_train, y_train)
y_pred_raw = model_raw.predict(X_test)
accuracy_raw = accuracy_score(y_test, y_pred_raw)
print(f"Accuracy without pre-processing: {accuracy_raw:.2f}")


#output
#accuracy after normalisation
#0.8095238095238095

#Accuracy after MinMaxScaler normalization: 0.81
#Accuracy without pre-processing: 0.81




