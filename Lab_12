from random import random

import numpy as np
import pandas as pd
from pandas.core.common import random_state
from sklearn.datasets import load_diabetes

# Load dataset
def load_data():
    X, y = load_diabetes(return_X_y=True, as_frame=True)
    return X, y

# Compute Mean Squared Error (MSE)
def mse(y):
    return np.mean((y - np.mean(y)) ** 2) if len(y) > 0 else 0

# Function to split dataset and compute the best split
def find_best_split(X, y):
    best_feature, best_threshold, min_error = None, None, float('inf')

    for feature in X.columns:
        unique_values = np.unique(X[feature])

        for threshold in unique_values:
            left_mask, right_mask = X[feature] <= threshold, X[feature] > threshold
            y_left, y_right = y[left_mask], y[right_mask]

            # Compute the total error (MSE for both splits)
            total_error = mse(y_left) + mse(y_right)

            # Keep track of the best split with minimum error
            if total_error < min_error:
                best_feature, best_threshold, min_error = feature, threshold, total_error

    return best_feature, best_threshold, min_error
def main():
    X,y = load_data()
# Find the best split
    best_feature, best_threshold, min_error = find_best_split(X, y)

# Print results
    print(f"Best Feature: {best_feature}")
    print(f"Best Threshold: {best_threshold:.4f}")
    print(f"Minimum Error (MSE): {min_error:.4f}")


if __name__ == "__main__":
    main()
