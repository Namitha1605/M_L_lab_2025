from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

def load_data():
    """Load the Iris dataset and return features and target values."""
    X, y = load_iris(return_X_y=True, as_frame=True)
    print(f"First 5 rows of X:\n{X.head()}")
    print(f"Feature names: {X.columns.tolist()}")
    print(f"Target shape: {y.shape}")
    print(f"Feature summary:\n{X.describe()}")
    print(f"Missing values:\n{X.isnull().sum()}")
    return X, y

def split_data(X, y):
    """Split dataset into training and test sets."""
    return train_test_split(X, y, test_size=0.3, random_state=30)

def train_and_evaluate(X_train, X_test, Y_train, Y_test):
    """Train AdaBoost with different learning rates and evaluate accuracy."""
    learning_rates = [0.001, 0.01, 0.1, 0.2, 0.3]

    for lr in learning_rates:
        model = AdaBoostClassifier(estimator=DecisionTreeClassifier(max_depth=1), n_estimators=50,learning_rate=lr,random_state=50)

        model.fit(X_train, Y_train)
        Y_pred = model.predict(X_test)
        accuracy = accuracy_score(Y_test, Y_pred)
        print(f"Learning Rate: {lr}, Accuracy: {accuracy:.4f}")

def main():
    X, y = load_data()
    X_train, X_test, Y_train, Y_test = split_data(X, y)
    train_and_evaluate(X_train, X_test, Y_train, Y_test)

if __name__ == "__main__":
    main()


# Output
# Learning Rate: 0.001, Accuracy: 0.5778
# Learning Rate: 0.01, Accuracy: 0.5778
# Learning Rate: 0.1, Accuracy: 0.9333
# Learning Rate: 0.2, Accuracy: 0.9333
# Learning Rate: 0.3, Accuracy: 0.9333
