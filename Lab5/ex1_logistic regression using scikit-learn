
import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from sklearn.model_selection import KFold
import seaborn as sns



def data_load():
    data = pd.read_csv("data(1).csv")
    #EDA
    print(data.info()) #data information
    print(data.head()) # starting few data
    print(data.describe()) # summary stats
    print(data.isnull().sum()) #checking foe missing values
    print(data.dtypes)
    print(data.columns.str.strip())
    df = data.drop(columns=["Unnamed: 32","id"])
    print(f"df: {df}")
    # label_encoder
    df['diagnosis'] = df['diagnosis'].replace({'M':1,'B':0})
    print(df)
    df['diagnosis'] = df['diagnosis'].astype(int)
    plt.figure(figsize=(10,8))
    sns.heatmap(df.corr())
    plt.show()
    X = df.drop(columns='diagnosis')
    print(X)
    Y = df['diagnosis']
    print(Y.head())


    return X,Y

def K_fold(X,Y):
    k=10
    accuracy_scores =[]
    kf = KFold(n_splits=k,shuffle=True,random_state=50)
    for train_index,test_index in kf.split(X):
        X_train,X_test = X.iloc[train_index],X.iloc[test_index]
        Y_train,Y_test = Y.iloc[train_index],Y.iloc[test_index]

        scale = StandardScaler()
        X_scaled_train = scale.fit_transform(X_train)
        X_scaled_test = scale.transform(X_test)

        model = LogisticRegression(random_state=50)
        model.fit(X_scaled_train,Y_train)

        y_pred = model.predict(X_scaled_test)

        accuracy = accuracy_score(Y_test,y_pred)
        accuracy_scores.append(accuracy)

    #,mean calculation for accuracy
    mean = np.mean(accuracy_scores)
    print(f"mean: {mean}")
    stdev = np.std(accuracy_scores)
    print(f"std: {stdev}")


def sigmoid_graph():
    z = np.linspace(-10,10,100)
    sigmoid = 1/(1+np.exp(-z))
    plt.plot(z,sigmoid)
    plt.title("sigmoid_curve")
    plt.xlabel('z')
    plt.ylabel('sigmoid')
    plt.grid(True)
    plt.show()




def main():
    X,Y = data_load()
    K_fold(X,Y)
    sigmoid_graph()


if __name__=="__main__":
    main()
