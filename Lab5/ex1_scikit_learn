import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler

# Load dataset
data = pd.read_csv('data.csv')

# Drop 'Unnamed: 32' column if it exists
if 'Unnamed: 32' in data.columns:
    data = data.drop(columns=['Unnamed: 32'])

data = data.dropna()  # Option 1: Drop rows with NaNs
# data.fillna(data.mean(), inplace=True)  # Option 2: Fill NaNs with column means

data['diagnosis'] = data['diagnosis'].map({'M': 1, 'B': 0})
X = data[['radius_mean', 'texture_mean', 'symmetry_worst']]
y = data['diagnosis']

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features (important for logistic regression)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Print coefficients
print("Model coefficients:", model.coef_)

z = np.linspace(-10, 10, 100)
sigmoid = 1 / (1 + np.exp(-z))
plt.plot(z, sigmoid, label="Sigmoid Function", color='blue')
plt.axvline(0, color='gray', linestyle='--', alpha=0.7)  # Decision boundary at z=0
plt.axhline(0.5, color='gray', linestyle='--', alpha=0.7)  # Threshold at 0.5
plt.xlabel("z (logits)")
plt.title("Sigmoid Function Curve")
plt.legend()
plt.grid(alpha=0.3)
plt.show()
